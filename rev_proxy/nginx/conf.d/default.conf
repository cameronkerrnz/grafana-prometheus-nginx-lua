# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.

include "/etc/nginx/conf/grafana-init.conf";

# Because I'm reusing configuration for multiple Grafana's,
# I wanted to have a variable that I could set in outside of
# an 'include', just to make reusability easier.
#
# Copied from my container.... YMMV
#
resolver 127.0.0.11;

# let's assume 64 bytes per entry, so 8k (the minimum) should be
# good for 128 users.
#
# Because this is something that could be used with multiple Grafana
# instances (as we do here with Grafana 7 and 9), we include the
# cookie name in the session key. If the cookie name is the same,
# then prefix it instead with the Grafana URL.

# this is required to proxy Grafana Live WebSocket connections.
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

map $http_referer $grafana_source {
    default 'dashboard';
    '~https?://[^/]+/explore.*' 'explore';
}

# Nginx doesn't support inequality operators in its conditionals.
# Admittedly, it does feel wrong to be using a regex for this.
map $request_time $datasource_request_is_slow {
    '~^0\.0[0-5]' 0;
    default 1;
}

map $request $grafana_loggable_path {
    default 1;
    '~GET /public/' 0;
    '~GET /avatar/' 0;
    '~GET /grafana-proxy/metrics' 0;
    '~GET /api/annotations' 0;
}

# We will be using some custom variables, such as grafana_username
# All requests should ensure that this variable is set, but we can't
# set it 'http' scope; it needs to go into each 'server'

# Log in JSON Format for general resources
log_format grafana_nginx_general_v0 escape=json '{'
    '"timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request_uri": "$request_uri", '
    '"request_args": "$args", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol", '
    '"grafana_org_id": "$http_x_grafana_org_id", '
    '"grafana_username": "$grafana_username", '
    '"log_schema": "grafana_nginx_general_v0"}';

# Log in JSON Format specialised for Grafana Reverse Proxy
#
# Note that this should only be used for specific locations as it logs the entire
# POST request body if present.
#
log_format grafana_nginx_dsquery_v0 escape=json '{'
    '"timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request_uri": "$request_uri", '
    '"request_args": "$args", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol", '
    '"grafana_get_query": "$arg_query", '
    '"grafana_get_start": "$arg_start", '
    '"grafana_get_end": "$arg_end", '
    '"grafana_get_step": "$arg_step", '
    '"grafana_post_body": "$request_body", '
    '"grafana_org_id": "$http_x_grafana_org_id", '
    '"grafana_dashboard_uid": "$http_x_dashboard_uid", '
    '"grafana_dashboard_id": "$http_x_dashboard_id", '
    '"grafana_dashboard_title": "$grafana_dashboard_title", '
    '"grafana_datasource_uid": "$http_x_datasource_uid", '
    '"grafana_plugin_id": "$http_x_plugin_id", '
    '"grafana_panel_id": "$http_x_panel_id", '
    '"grafana_panel_title": "$grafana_panel_title", '
    '"grafana_source": "$grafana_source", '
    '"grafana_username": "$grafana_username", '
    '"log_schema": "grafana_nginx_dsquery_v0"}';

# This is a server just for local diagnostics/metrics
server {
    listen       8080;
    server_name  localhost;

    allow 127.0.0.1;
    # Here I really would just like to say 'allow prometheus'
    allow 172.16.0.0/12;
    deny all;

    include "/etc/nginx/conf/grafana-init-logging-vars.conf";

    location /grafana-proxy/metrics {
        default_type 'text/plain';
        content_by_lua_block {
            prometheus:collect()
        }
    }

    location /grafana-proxy/debug {
        default_type 'text/plain';
        content_by_lua_file "/etc/nginx/lua/debug-content.lua";
    }

    access_log /dev/stdout grafana_nginx_general_v0 if=$grafana_loggable_path;
}

server {
    listen       8086;
    server_name  localhost;

    set $grafana_auth_login_cookie_name "grafana_6_session";
    set $grafana_backend_url "http://grafana_6:3000";

    include "/etc/nginx/conf/grafana-proxy.conf";

    # no access_log here, because it is set on a per-location basis
}

server {
    listen       8087;
    server_name  localhost;

    set $grafana_auth_login_cookie_name "grafana_7_session";
    set $grafana_backend_url "http://grafana_7:3000";

    include "/etc/nginx/conf/grafana-proxy.conf";

    # no access_log here, because it is set on a per-location basis
}

server {
    listen       8088;
    server_name  localhost;

    set $grafana_auth_login_cookie_name "grafana_8_session";
    set $grafana_backend_url "http://grafana_8:3000";

    include "/etc/nginx/conf/grafana-proxy.conf";

    # no access_log here, because it is set on a per-location basis
}

# This shows a configuration for Grafana 9, which uses /api/ds/query
#
server {
    listen       8089;
    server_name  localhost;

    set $grafana_auth_login_cookie_name "grafana_9_session";
    set $grafana_backend_url "http://grafana_9:3000";

    include "/etc/nginx/conf/grafana-proxy.conf";

    # no access_log here, because it is set on a per-location basis
}

